package it.polimi.testing.lifecycle;

import android.os.Bundle;
import android.support.annotation.Nullable;

import org.junit.Test;

/**
 * Main class for the lifecycle tests. Contains the common parts that will be used by the test classes for specific
 * test frameworks. It defines:
 * - two abstract methods for before/after test [implemented by the subclasses in the other libraries]
 * - several abstract methods to implement the lifecycle changes [implemented by the subclasses in the other libraries]
 * - several abstract methods to get the callbacks to use during the tests [implemented by the end-developer]
 * - the actual lifecycle tests
 */
public abstract class LifecycleTest
{
    /*********************************************************************************
     ********************************* BEFORE/AFTER **********************************
     *********************************************************************************/

    /**
     * Method called at the beginning of each lifecycle test, for initializations
     *
     * Note: cannot use a @Before method. This needs to be called only during lifecycle tests, but if the developer
     * defines custom tests in the class...
     */
    abstract void beforeLifecycleTest();

    /**
     * Method called at the end of each lifecycle test, for cleanup
     *
     * Note: cannot use an @After method. This needs to be called only during lifecycle tests, but if the developer
     * defines custom tests in the class...
     */
    abstract void afterLifecycleTest();



    /*********************************************************************************
     ******************************* LIFECYCLE CHANGES *******************************
     *********************************************************************************/

    /**
     * Performs the call to onCreate()
     * @param savedInstanceState the bundle to be passed to the method
     */
    abstract void callOnCreate(Bundle savedInstanceState);

    /**
     * Performs the call to onRestart()
     * @return true if the implementation also calls the onStart() afterwards, false otherwise
     */
    abstract boolean callOnRestart();

    /**
     * Performs the call to onStart()
     */
    abstract void callOnStart();

    /**
     * Performs the call to onResume()
     */
    abstract void callOnResume();

    /**
     * Performs the call to onPause()
     */
    abstract void callOnPause();

    /**
     * Performs the call to onStop()
     */
    abstract void callOnStop();

    /**
     * Performs the call to finish(), i.e. onPause() -> onStop() -> onDestroy()
     */
    abstract void callFinish();

    /**
     * Rotates the device (landscape->portrait or vice-versa)
     */
    abstract void rotateDevice();

    /**
     * Performs the call to recreate(), i.e. destroy then create
     */
    abstract void recreateActivity();

    /**
     * Gets the bundle generated by onSaveInstanceState()
     * @return the saved instance state
     */
    abstract Bundle getSavedInstanceState();




    /*********************************************************************************
     ****************************** GET TEST CALLBACKS *******************************
     *********************************************************************************/

    /**
     * Allows to define the test:
     * - onCreate()
     * - onStart()
     * - onResume()
     * - <b>{@link PauseCallback#beforePause()}</b>
     * - onPause()
     * - <b>{@link PauseCallback#whilePaused()}</b>
     * - onResume()
     * - <b>{@link PauseCallback#afterResume()}</b>
     *
     * @return the callback (null if not interested in this test)
     */
    protected abstract @Nullable PauseCallback testPause();

    /**
     * Allows to define the test:
     * - onCreate()
     * - onStart()
     * - onResume()
     * - <b>{@link StopCallback#beforeStop()}</b>
     * - onPause()
     * - onStop()
     * - <b>{@link StopCallback#whileStopped()}</b>
     * - onRestart()
     * - onStart()
     * - onResume()
     * - <b>{@link StopCallback#afterRestart()}</b>
     *
     * @return the callback (null if not interested in this test)
     */
    protected abstract @Nullable StopCallback testStop();

    /**
     * Allows to define the test:
     * - onCreate()
     * - onStart()
     * - onResume()
     * - <b>{@link DestroyCallback#beforeDestroy()}</b>
     * - onPause()
     * - onStop()
     * - [onDestroy()]
     * - <b>{@link DestroyCallback#afterDestroy()}</b>
     *
     * Note that onDestroy() gets called in one test while not in another one: see <a href="https://developer.android.com/reference/android/app/Activity.html#onDestroy%28%29">here</a>,
     * onDestroy() is not always called
     *
     * @return the callback (null if not interested in this test)
     */
    protected abstract @Nullable DestroyCallback testDestroy();


    /**
     * Allows to define a test where the device is rotated (landscape->portrait or vice-versa). In the default implementation
     * this also means that the component is recreated (and so this test is a special case of {@link LifecycleTest#testRecreation()}),
     * but it might not be the case (e.g. parameters set in app manifest)
     * @return the callback (null if not interested in this test)
     */
    protected abstract @Nullable RotationCallback testRotation();

    /**
     * Allows to define the test:
     * - onCreate()
     * - onStart()
     * - onResume()
     * - <b>{@link RecreateCallback#beforeRecreation()}</b>
     * - onPause()
     * - onStop()
     * - onDestroy()
     * - onCreate()
     * - onStart()
     * - onResume()
     * - <b>{@link RecreateCallback#afterRecreation()}</b>
     *
     * During the test, <b>{@link RecreateCallback#checkSavedInstance(Bundle)}</b> will be called to allow
     * checking the actual contents of the bundle used to pass the instance of the component.
     *
     * @return the callback (null if not interested in this test)
     */
    protected abstract @Nullable RecreateCallback testRecreation();




    /*********************************************************************************
     ********************************* ACTUAL TESTS **********************************
     *********************************************************************************/

    /**
     * @see LifecycleTest#testPause()
     */
    @Test
    public void lifecycleTestPause()
    {
        beforeLifecycleTest();

        final PauseCallback callback = testPause();
        if(callback==null) return;

        callback.beforePause();

        callOnPause();

        callback.whilePaused();

        callOnResume();

        callback.afterResume();

        afterLifecycleTest();
    }

    /**
     * @see LifecycleTest#testStop()
     */
    @Test
    public void lifecycleTestStop()
    {
        beforeLifecycleTest();

        final StopCallback callback = testStop();
        if(callback==null) return;

        callback.beforeStop();

        callOnPause();
        callOnStop();

        callback.whileStopped();

        boolean alsoCallsOnStart = callOnRestart();
        if(!alsoCallsOnStart) callOnStart();
        callOnResume();

        callback.afterRestart();

        afterLifecycleTest();
    }

    /**
     * @see LifecycleTest#testDestroy()
     */
    @Test
    public void lifecycleTestDestroyWithOnDestroy()
    {
        beforeLifecycleTest();

        final DestroyCallback callback = testDestroy();
        if(callback==null) return;

        callback.beforeDestroy();

        callFinish();

        callback.afterDestroy();

        afterLifecycleTest();
    }

    /**
     * @see LifecycleTest#testDestroy()
     */
    @Test
    public void lifecycleTestDestroyWithoutOnDestroy()
    {
        beforeLifecycleTest();

        final DestroyCallback callback = testDestroy();
        if(callback==null) return;

        callback.beforeDestroy();

        callOnPause();
        callOnStop();

        callback.afterDestroy();

        afterLifecycleTest();
    }

    /**
     * @see LifecycleTest#testRotation()
     */
    @Test
    public void lifecycleTestRotation()
    {
        beforeLifecycleTest();

        final RotationCallback callback = testRotation();
        if(callback==null) return;

        callback.beforeRotation();

        rotateDevice();

        callback.afterRotation();

        afterLifecycleTest();
    }

    /**
     * @see LifecycleTest#testRecreation()
     */
    @Test
    public void lifecycleTestRecreation()
    {
        beforeLifecycleTest();

        final RecreateCallback callback = testRecreation();
        if(callback==null) return;

        callback.beforeRecreation();

        callback.checkSavedInstance(getSavedInstanceState());

        recreateActivity();

        callback.afterRecreation();

        afterLifecycleTest();
    }
}
